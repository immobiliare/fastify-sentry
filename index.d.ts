import {
    FastifyError,
    FastifyRequest,
    FastifyReply,
    FastifyPluginCallback,
    FastifyPluginAsync
} from 'fastify';
import Sentry, { Hub } from '@sentry/node';

import { RequestKeys, UserData, RequestData } from './types/utils';

export interface SentryPluginOptions extends Sentry.NodeOptions {
    /** Set the plugin error handler */
    setErrorHandler?: boolean
    /** Called inside the error handler, it should return `true` of `false`depending on the fact we want to send the error to Sentry or not */
    shouldHandleError?: (error: FastifyError, request: FastifyRequest, reply: FastifyReply) => boolean
    /**  Custom hook to respond the errored request */
    errorResponse?: (error: FastifyError, request: FastifyRequest, reply: FastifyReply) => void
    /** Custom function to build the transaction name from the request */
    getTransactionName?: (request: FastifyRequest) => string
    /** Custom function to extract the request data */
    extractRequestData?: (request: FastifyRequest, keys: [RequestKeys]) => RequestData
    /** Custom function to extract the user data from the request */
    extractUserData?: (request: FastifyRequest) => UserData
}

export const sentryPluginCallback: FastifyPluginCallback<SentryPluginOptions>;
export const sentryPluginAsync: FastifyPluginAsync<SentryPluginOptions>;

export default sentryPluginCallback;

declare module 'fastify' {
    interface FastifyInstance {
        Sentry: typeof Sentry;
    }
    interface FastifyReply {
        /** The event id generated by Sentry.captureException */
        sentryEventId: string
        /** The request transaction (available if tracing is enabled) */
        sentryTransaction: ReturnType<Hub['startTransaction']> | null
    }
}

export { RequestKeys, UserData, RequestData } from './types/utils';
